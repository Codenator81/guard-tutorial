diff --git a/src/AppBundle/Security/FormLoginAuthenticator.php b/src/AppBundle/Security/FormLoginAuthenticator.php
index 686783b..e25b885 100644
--- a/src/AppBundle/Security/FormLoginAuthenticator.php
+++ b/src/AppBundle/Security/FormLoginAuthenticator.php
@@ -4,27 +4,56 @@ namespace AppBundle\Security;
 
 use KnpU\Guard\Authenticator\AbstractFormLoginAuthenticator;
 use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\Routing\RouterInterface;
+use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
+use Symfony\Component\Security\Core\Exception\BadCredentialsException;
+use Symfony\Component\Security\Core\Security;
 use Symfony\Component\Security\Core\User\UserInterface;
 
 class FormLoginAuthenticator extends AbstractFormLoginAuthenticator
 {
+    private $router;
+
+    private $encoder;
+
+    public function __construct(RouterInterface $router, UserPasswordEncoderInterface $encoder)
+    {
+        $this->router = $router;
+        $this->encoder = $encoder;
+    }
+
     protected function getLoginUrl()
     {
-        // TODO: Implement getLoginUrl() method.
+        return $this->router->generate('security_login');
     }
 
     protected function getDefaultSuccessRedirectUrl()
     {
-        // TODO: Implement getDefaultSuccessRedirectUrl() method.
+        return $this->router->generate('homepage');
     }
 
     public function getCredentials(Request $request)
     {
-        // TODO: Implement getCredentials() method.
+        if ($request->getPathInfo() != '/login_check' || !$request->isMethod('POST')) {
+            return;
+        }
+
+        $username = $request->request->get('_username');
+        $request->getSession()->set(Security::LAST_USERNAME, $username);
+        $password = $request->request->get('_password');
+
+        return array(
+            'username' => $username,
+            'password' => $password
+        );
     }
 
     public function checkCredentials($credentials, UserInterface $user)
     {
-        // TODO: Implement checkCredentials() method.
+        $plainPassword = $credentials['password'];
+        if (!$this->encoder->isPasswordValid($user, $plainPassword)) {
+            // throw any AuthenticationException
+            throw new BadCredentialsException();
+        }
     }
 }
